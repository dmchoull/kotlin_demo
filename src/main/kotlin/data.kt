data class Product(
        val name: String,
        val description: String,
        val price: Int,
        val salePrice: Int?,
        var inStock: Boolean = true
)

fun printListing(p: Product) {
    val (name, description, price) = p
    println("$name - $description: $${price / 100.0}")
}

fun main(args: Array<String>) {
    val p1 = Product(name = "Post-it notes", price = 999, description = "Super sticky", salePrice = null)
    val p2 = p1.copy(name = "Post-it notes Mega Pack", price = 3499, inStock = false)

    printListing(p1)
    printListing(p2)

    println(p1)

    // should equal an equivalent product
    println(p1 == Product(name = "Post-it notes", price = 999, description = "Super sticky", salePrice = null))
}

// product class that implements all the functions generated by the compiler in the case of the data class version
class BoilerPlateProduct(
        val name: String,
        val description: String,
        val price: Int,
        val salePrice: Int?,
        var inStock: Boolean = true
) {
    // allows usage of destructuring declarations as seen in printListing function
    operator fun component1() = name
    operator fun component2() = description
    operator fun component3() = price
    operator fun component4() = salePrice
    operator fun component5() = inStock

    fun copy(name: String = this.name, description: String = this.description, price: Int = this.price, salePrice: Int? = this.salePrice, inStock: Boolean = this.inStock): BoilerPlateProduct {
        return BoilerPlateProduct(name, description, price, salePrice, inStock)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Product

        if (name != other.name) return false
        if (description != other.description) return false
        if (price != other.price) return false
        if (salePrice != other.salePrice) return false
        if (inStock != other.inStock) return false

        return true
    }

    override fun hashCode(): Int {
        var result = name.hashCode()
        result = 31 * result + description.hashCode()
        result = 31 * result + price
        result = 31 * result + (salePrice ?: 0)
        result = 31 * result + inStock.hashCode()
        return result
    }

    override fun toString(): String {
        return "BoilerPlateProduct(name='$name', description='$description', price=$price, salePrice=$salePrice, inStock=$inStock)"
    }
}
